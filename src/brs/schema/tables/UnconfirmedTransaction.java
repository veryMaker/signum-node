/*
 * This file is generated by jOOQ.
 */
package brs.schema.tables;


import brs.schema.Db;
import brs.schema.Indexes;
import brs.schema.Keys;
import brs.schema.tables.records.UnconfirmedTransactionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UnconfirmedTransaction extends TableImpl<UnconfirmedTransactionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DB.unconfirmed_transaction</code>
     */
    public static final UnconfirmedTransaction UNCONFIRMED_TRANSACTION = new UnconfirmedTransaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UnconfirmedTransactionRecord> getRecordType() {
        return UnconfirmedTransactionRecord.class;
    }

    /**
     * The column <code>DB.unconfirmed_transaction.db_id</code>.
     */
    public final TableField<UnconfirmedTransactionRecord, Long> DB_ID = createField(DSL.name("db_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>DB.unconfirmed_transaction.id</code>.
     */
    public final TableField<UnconfirmedTransactionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.unconfirmed_transaction.expiration</code>.
     */
    public final TableField<UnconfirmedTransactionRecord, Integer> EXPIRATION = createField(DSL.name("expiration"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.unconfirmed_transaction.transaction_height</code>.
     */
    public final TableField<UnconfirmedTransactionRecord, Integer> TRANSACTION_HEIGHT = createField(DSL.name("transaction_height"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.unconfirmed_transaction.fee_per_byte</code>.
     */
    public final TableField<UnconfirmedTransactionRecord, Long> FEE_PER_BYTE = createField(DSL.name("fee_per_byte"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.unconfirmed_transaction.timestamp</code>.
     */
    public final TableField<UnconfirmedTransactionRecord, Integer> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.unconfirmed_transaction.transaction_bytes</code>.
     */
    public final TableField<UnconfirmedTransactionRecord, byte[]> TRANSACTION_BYTES = createField(DSL.name("transaction_bytes"), SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>DB.unconfirmed_transaction.height</code>.
     */
    public final TableField<UnconfirmedTransactionRecord, Integer> HEIGHT = createField(DSL.name("height"), SQLDataType.INTEGER.nullable(false), this, "");

    private UnconfirmedTransaction(Name alias, Table<UnconfirmedTransactionRecord> aliased) {
        this(alias, aliased, null);
    }

    private UnconfirmedTransaction(Name alias, Table<UnconfirmedTransactionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB.unconfirmed_transaction</code> table reference
     */
    public UnconfirmedTransaction(String alias) {
        this(DSL.name(alias), UNCONFIRMED_TRANSACTION);
    }

    /**
     * Create an aliased <code>DB.unconfirmed_transaction</code> table reference
     */
    public UnconfirmedTransaction(Name alias) {
        this(alias, UNCONFIRMED_TRANSACTION);
    }

    /**
     * Create a <code>DB.unconfirmed_transaction</code> table reference
     */
    public UnconfirmedTransaction() {
        this(DSL.name("unconfirmed_transaction"), null);
    }

    public <O extends Record> UnconfirmedTransaction(Table<O> child, ForeignKey<O, UnconfirmedTransactionRecord> key) {
        super(child, key, UNCONFIRMED_TRANSACTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.UNCONFIRMED_TRANSACTION_UNCONFIRMED_TRANSACTION_HEIGHT_FEE_TIMESTAMP_IDX);
    }

    @Override
    public Identity<UnconfirmedTransactionRecord, Long> getIdentity() {
        return (Identity<UnconfirmedTransactionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UnconfirmedTransactionRecord> getPrimaryKey() {
        return Keys.KEY_UNCONFIRMED_TRANSACTION_PRIMARY;
    }

    @Override
    public List<UniqueKey<UnconfirmedTransactionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_UNCONFIRMED_TRANSACTION_UNCONFIRMED_TRANSACTION_ID_IDX);
    }

    @Override
    public UnconfirmedTransaction as(String alias) {
        return new UnconfirmedTransaction(DSL.name(alias), this);
    }

    @Override
    public UnconfirmedTransaction as(Name alias) {
        return new UnconfirmedTransaction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UnconfirmedTransaction rename(String name) {
        return new UnconfirmedTransaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UnconfirmedTransaction rename(Name name) {
        return new UnconfirmedTransaction(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, Integer, Integer, Long, Integer, byte[], Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
