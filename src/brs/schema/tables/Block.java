/*
 * This file is generated by jOOQ.
 */
package brs.schema.tables;


import brs.schema.Db;
import brs.schema.Indexes;
import brs.schema.Keys;
import brs.schema.tables.records.BlockRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row22;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Block extends TableImpl<BlockRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DB.block</code>
     */
    public static final Block BLOCK = new Block();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlockRecord> getRecordType() {
        return BlockRecord.class;
    }

    /**
     * The column <code>DB.block.db_id</code>.
     */
    public final TableField<BlockRecord, Long> DB_ID = createField(DSL.name("db_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>DB.block.id</code>.
     */
    public final TableField<BlockRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.block.version</code>.
     */
    public final TableField<BlockRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.block.timestamp</code>.
     */
    public final TableField<BlockRecord, Integer> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.block.previous_block_id</code>.
     */
    public final TableField<BlockRecord, Long> PREVIOUS_BLOCK_ID = createField(DSL.name("previous_block_id"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>DB.block.total_amount</code>.
     */
    public final TableField<BlockRecord, Long> TOTAL_AMOUNT = createField(DSL.name("total_amount"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.block.total_fee</code>.
     */
    public final TableField<BlockRecord, Long> TOTAL_FEE = createField(DSL.name("total_fee"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.block.payload_length</code>.
     */
    public final TableField<BlockRecord, Integer> PAYLOAD_LENGTH = createField(DSL.name("payload_length"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.block.generator_public_key</code>.
     */
    public final TableField<BlockRecord, byte[]> GENERATOR_PUBLIC_KEY = createField(DSL.name("generator_public_key"), SQLDataType.VARBINARY(32).nullable(false), this, "");

    /**
     * The column <code>DB.block.previous_block_hash</code>.
     */
    public final TableField<BlockRecord, byte[]> PREVIOUS_BLOCK_HASH = createField(DSL.name("previous_block_hash"), SQLDataType.VARBINARY(32).defaultValue(DSL.field("NULL", SQLDataType.VARBINARY)), this, "");

    /**
     * The column <code>DB.block.cumulative_difficulty</code>.
     */
    public final TableField<BlockRecord, byte[]> CUMULATIVE_DIFFICULTY = createField(DSL.name("cumulative_difficulty"), SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>DB.block.base_target</code>.
     */
    public final TableField<BlockRecord, Long> BASE_TARGET = createField(DSL.name("base_target"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.block.next_block_id</code>.
     */
    public final TableField<BlockRecord, Long> NEXT_BLOCK_ID = createField(DSL.name("next_block_id"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>DB.block.height</code>.
     */
    public final TableField<BlockRecord, Integer> HEIGHT = createField(DSL.name("height"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.block.generation_signature</code>.
     */
    public final TableField<BlockRecord, byte[]> GENERATION_SIGNATURE = createField(DSL.name("generation_signature"), SQLDataType.VARBINARY(64).nullable(false), this, "");

    /**
     * The column <code>DB.block.block_signature</code>.
     */
    public final TableField<BlockRecord, byte[]> BLOCK_SIGNATURE = createField(DSL.name("block_signature"), SQLDataType.VARBINARY(64).nullable(false), this, "");

    /**
     * The column <code>DB.block.payload_hash</code>.
     */
    public final TableField<BlockRecord, byte[]> PAYLOAD_HASH = createField(DSL.name("payload_hash"), SQLDataType.VARBINARY(32).nullable(false), this, "");

    /**
     * The column <code>DB.block.generator_id</code>.
     */
    public final TableField<BlockRecord, Long> GENERATOR_ID = createField(DSL.name("generator_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.block.nonce</code>.
     */
    public final TableField<BlockRecord, Long> NONCE = createField(DSL.name("nonce"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.block.ats</code>.
     */
    public final TableField<BlockRecord, byte[]> ATS = createField(DSL.name("ats"), SQLDataType.BLOB.defaultValue(DSL.field("NULL", SQLDataType.BLOB)), this, "");

    /**
     * The column <code>DB.block.total_fee_cash_back</code>.
     */
    public final TableField<BlockRecord, Long> TOTAL_FEE_CASH_BACK = createField(DSL.name("total_fee_cash_back"), SQLDataType.BIGINT.defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>DB.block.total_fee_burnt</code>.
     */
    public final TableField<BlockRecord, Long> TOTAL_FEE_BURNT = createField(DSL.name("total_fee_burnt"), SQLDataType.BIGINT.defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    private Block(Name alias, Table<BlockRecord> aliased) {
        this(alias, aliased, null);
    }

    private Block(Name alias, Table<BlockRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB.block</code> table reference
     */
    public Block(String alias) {
        this(DSL.name(alias), BLOCK);
    }

    /**
     * Create an aliased <code>DB.block</code> table reference
     */
    public Block(Name alias) {
        this(alias, BLOCK);
    }

    /**
     * Create a <code>DB.block</code> table reference
     */
    public Block() {
        this(DSL.name("block"), null);
    }

    public <O extends Record> Block(Table<O> child, ForeignKey<O, BlockRecord> key) {
        super(child, key, BLOCK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.BLOCK_BLOCK_GENERATOR_ID_IDX);
    }

    @Override
    public Identity<BlockRecord, Long> getIdentity() {
        return (Identity<BlockRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BlockRecord> getPrimaryKey() {
        return Keys.KEY_BLOCK_PRIMARY;
    }

    @Override
    public List<UniqueKey<BlockRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_BLOCK_BLOCK_ID_IDX, Keys.KEY_BLOCK_BLOCK_TIMESTAMP_IDX, Keys.KEY_BLOCK_BLOCK_HEIGHT_IDX);
    }

    @Override
    public List<ForeignKey<BlockRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_3C, Keys.CONSTRAINT_3C5);
    }

    private transient Block _constraint_3c;
    private transient Block _constraint_3c5;

    public Block constraint_3c() {
        if (_constraint_3c == null)
            _constraint_3c = new Block(this, Keys.CONSTRAINT_3C);

        return _constraint_3c;
    }

    public Block constraint_3c5() {
        if (_constraint_3c5 == null)
            _constraint_3c5 = new Block(this, Keys.CONSTRAINT_3C5);

        return _constraint_3c5;
    }

    @Override
    public Block as(String alias) {
        return new Block(DSL.name(alias), this);
    }

    @Override
    public Block as(Name alias) {
        return new Block(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Block rename(String name) {
        return new Block(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Block rename(Name name) {
        return new Block(name, null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row22<Long, Long, Integer, Integer, Long, Long, Long, Integer, byte[], byte[], byte[], Long, Long, Integer, byte[], byte[], byte[], Long, Long, byte[], Long, Long> fieldsRow() {
        return (Row22) super.fieldsRow();
    }
}
