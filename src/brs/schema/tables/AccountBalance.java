/*
 * This file is generated by jOOQ.
 */
package brs.schema.tables;


import brs.schema.Db;
import brs.schema.Indexes;
import brs.schema.Keys;
import brs.schema.tables.records.AccountBalanceRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountBalance extends TableImpl<AccountBalanceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DB.account_balance</code>
     */
    public static final AccountBalance ACCOUNT_BALANCE = new AccountBalance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountBalanceRecord> getRecordType() {
        return AccountBalanceRecord.class;
    }

    /**
     * The column <code>DB.account_balance.db_id</code>.
     */
    public final TableField<AccountBalanceRecord, Long> DB_ID = createField(DSL.name("db_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>DB.account_balance.id</code>.
     */
    public final TableField<AccountBalanceRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.account_balance.balance</code>.
     */
    public final TableField<AccountBalanceRecord, Long> BALANCE = createField(DSL.name("balance"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.account_balance.unconfirmed_balance</code>.
     */
    public final TableField<AccountBalanceRecord, Long> UNCONFIRMED_BALANCE = createField(DSL.name("unconfirmed_balance"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.account_balance.forged_balance</code>.
     */
    public final TableField<AccountBalanceRecord, Long> FORGED_BALANCE = createField(DSL.name("forged_balance"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.account_balance.height</code>.
     */
    public final TableField<AccountBalanceRecord, Integer> HEIGHT = createField(DSL.name("height"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.account_balance.latest</code>.
     */
    public final TableField<AccountBalanceRecord, Boolean> LATEST = createField(DSL.name("latest"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("1", SQLDataType.BOOLEAN)), this, "");

    private AccountBalance(Name alias, Table<AccountBalanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountBalance(Name alias, Table<AccountBalanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB.account_balance</code> table reference
     */
    public AccountBalance(String alias) {
        this(DSL.name(alias), ACCOUNT_BALANCE);
    }

    /**
     * Create an aliased <code>DB.account_balance</code> table reference
     */
    public AccountBalance(Name alias) {
        this(alias, ACCOUNT_BALANCE);
    }

    /**
     * Create a <code>DB.account_balance</code> table reference
     */
    public AccountBalance() {
        this(DSL.name("account_balance"), null);
    }

    public <O extends Record> AccountBalance(Table<O> child, ForeignKey<O, AccountBalanceRecord> key) {
        super(child, key, ACCOUNT_BALANCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACCOUNT_BALANCE_ACCOUNT_BALANCE_HEIGHT_IDX, Indexes.ACCOUNT_BALANCE_ACCOUNT_BALANCE_ID_LATEST_IDX);
    }

    @Override
    public Identity<AccountBalanceRecord, Long> getIdentity() {
        return (Identity<AccountBalanceRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AccountBalanceRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNT_BALANCE_PRIMARY;
    }

    @Override
    public List<UniqueKey<AccountBalanceRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ACCOUNT_BALANCE_ACCOUNT_BALANCE_ID_HEIGHT_IDX);
    }

    @Override
    public AccountBalance as(String alias) {
        return new AccountBalance(DSL.name(alias), this);
    }

    @Override
    public AccountBalance as(Name alias) {
        return new AccountBalance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountBalance rename(String name) {
        return new AccountBalance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountBalance rename(Name name) {
        return new AccountBalance(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, Long, Long, Integer, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
