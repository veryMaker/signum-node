/*
 * This file is generated by jOOQ.
 */
package brs.schema.tables;


import brs.schema.Db;
import brs.schema.Indexes;
import brs.schema.Keys;
import brs.schema.tables.records.EscrowRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Escrow extends TableImpl<EscrowRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DB.escrow</code>
     */
    public static final Escrow ESCROW = new Escrow();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EscrowRecord> getRecordType() {
        return EscrowRecord.class;
    }

    /**
     * The column <code>DB.escrow.db_id</code>.
     */
    public final TableField<EscrowRecord, Long> DB_ID = createField(DSL.name("db_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>DB.escrow.id</code>.
     */
    public final TableField<EscrowRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.escrow.sender_id</code>.
     */
    public final TableField<EscrowRecord, Long> SENDER_ID = createField(DSL.name("sender_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.escrow.recipient_id</code>.
     */
    public final TableField<EscrowRecord, Long> RECIPIENT_ID = createField(DSL.name("recipient_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.escrow.amount</code>.
     */
    public final TableField<EscrowRecord, Long> AMOUNT = createField(DSL.name("amount"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.escrow.required_signers</code>.
     */
    public final TableField<EscrowRecord, Integer> REQUIRED_SIGNERS = createField(DSL.name("required_signers"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>DB.escrow.deadline</code>.
     */
    public final TableField<EscrowRecord, Integer> DEADLINE = createField(DSL.name("deadline"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.escrow.deadline_action</code>.
     */
    public final TableField<EscrowRecord, Integer> DEADLINE_ACTION = createField(DSL.name("deadline_action"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.escrow.height</code>.
     */
    public final TableField<EscrowRecord, Integer> HEIGHT = createField(DSL.name("height"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.escrow.latest</code>.
     */
    public final TableField<EscrowRecord, Boolean> LATEST = createField(DSL.name("latest"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("1", SQLDataType.BOOLEAN)), this, "");

    private Escrow(Name alias, Table<EscrowRecord> aliased) {
        this(alias, aliased, null);
    }

    private Escrow(Name alias, Table<EscrowRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB.escrow</code> table reference
     */
    public Escrow(String alias) {
        this(DSL.name(alias), ESCROW);
    }

    /**
     * Create an aliased <code>DB.escrow</code> table reference
     */
    public Escrow(Name alias) {
        this(alias, ESCROW);
    }

    /**
     * Create a <code>DB.escrow</code> table reference
     */
    public Escrow() {
        this(DSL.name("escrow"), null);
    }

    public <O extends Record> Escrow(Table<O> child, ForeignKey<O, EscrowRecord> key) {
        super(child, key, ESCROW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ESCROW_ESCROW_DEADLINE_HEIGHT_IDX, Indexes.ESCROW_ESCROW_RECIPIENT_ID_HEIGHT_IDX, Indexes.ESCROW_ESCROW_SENDER_ID_HEIGHT_IDX);
    }

    @Override
    public Identity<EscrowRecord, Long> getIdentity() {
        return (Identity<EscrowRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EscrowRecord> getPrimaryKey() {
        return Keys.KEY_ESCROW_PRIMARY;
    }

    @Override
    public List<UniqueKey<EscrowRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ESCROW_ESCROW_ID_HEIGHT_IDX);
    }

    @Override
    public Escrow as(String alias) {
        return new Escrow(DSL.name(alias), this);
    }

    @Override
    public Escrow as(Name alias) {
        return new Escrow(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Escrow rename(String name) {
        return new Escrow(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Escrow rename(Name name) {
        return new Escrow(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, Long, Long, Long, Integer, Integer, Integer, Integer, Boolean> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
