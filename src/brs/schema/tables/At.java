/*
 * This file is generated by jOOQ.
 */
package brs.schema.tables;


import brs.schema.Db;
import brs.schema.Indexes;
import brs.schema.Keys;
import brs.schema.tables.records.AtRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class At extends TableImpl<AtRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DB.at</code>
     */
    public static final At AT = new At();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AtRecord> getRecordType() {
        return AtRecord.class;
    }

    /**
     * The column <code>DB.at.db_id</code>.
     */
    public final TableField<AtRecord, Long> DB_ID = createField(DSL.name("db_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>DB.at.id</code>.
     */
    public final TableField<AtRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.at.creator_id</code>.
     */
    public final TableField<AtRecord, Long> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.at.name</code>.
     */
    public final TableField<AtRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(30).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>DB.at.description</code>.
     */
    public final TableField<AtRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.defaultValue(DSL.field("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>DB.at.version</code>.
     */
    public final TableField<AtRecord, Short> VERSION = createField(DSL.name("version"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>DB.at.csize</code>.
     */
    public final TableField<AtRecord, Integer> CSIZE = createField(DSL.name("csize"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.at.dsize</code>.
     */
    public final TableField<AtRecord, Integer> DSIZE = createField(DSL.name("dsize"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.at.c_user_stack_bytes</code>.
     */
    public final TableField<AtRecord, Integer> C_USER_STACK_BYTES = createField(DSL.name("c_user_stack_bytes"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.at.c_call_stack_bytes</code>.
     */
    public final TableField<AtRecord, Integer> C_CALL_STACK_BYTES = createField(DSL.name("c_call_stack_bytes"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.at.creation_height</code>.
     */
    public final TableField<AtRecord, Integer> CREATION_HEIGHT = createField(DSL.name("creation_height"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.at.ap_code</code>.
     */
    public final TableField<AtRecord, byte[]> AP_CODE = createField(DSL.name("ap_code"), SQLDataType.BLOB.defaultValue(DSL.field("NULL", SQLDataType.BLOB)), this, "");

    /**
     * The column <code>DB.at.height</code>.
     */
    public final TableField<AtRecord, Integer> HEIGHT = createField(DSL.name("height"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.at.latest</code>.
     */
    public final TableField<AtRecord, Boolean> LATEST = createField(DSL.name("latest"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("1", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>DB.at.ap_code_hash_id</code>.
     */
    public final TableField<AtRecord, Long> AP_CODE_HASH_ID = createField(DSL.name("ap_code_hash_id"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    private At(Name alias, Table<AtRecord> aliased) {
        this(alias, aliased, null);
    }

    private At(Name alias, Table<AtRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB.at</code> table reference
     */
    public At(String alias) {
        this(DSL.name(alias), AT);
    }

    /**
     * Create an aliased <code>DB.at</code> table reference
     */
    public At(Name alias) {
        this(alias, AT);
    }

    /**
     * Create a <code>DB.at</code> table reference
     */
    public At() {
        this(DSL.name("at"), null);
    }

    public <O extends Record> At(Table<O> child, ForeignKey<O, AtRecord> key) {
        super(child, key, AT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.AT_AT_AP_CODE_HASH_ID_INDEX, Indexes.AT_AT_CREATOR_ID_HEIGHT_IDX, Indexes.AT_AT_HEIGHT_IDX);
    }

    @Override
    public Identity<AtRecord, Long> getIdentity() {
        return (Identity<AtRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AtRecord> getPrimaryKey() {
        return Keys.KEY_AT_PRIMARY;
    }

    @Override
    public List<UniqueKey<AtRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_AT_AT_ID_HEIGHT_IDX);
    }

    @Override
    public At as(String alias) {
        return new At(DSL.name(alias), this);
    }

    @Override
    public At as(Name alias) {
        return new At(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public At rename(String name) {
        return new At(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public At rename(Name name) {
        return new At(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Long, Long, Long, String, String, Short, Integer, Integer, Integer, Integer, Integer, byte[], Integer, Boolean, Long> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
