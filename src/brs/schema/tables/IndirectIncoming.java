/*
 * This file is generated by jOOQ.
 */
package brs.schema.tables;


import brs.schema.Db;
import brs.schema.Indexes;
import brs.schema.Keys;
import brs.schema.tables.records.IndirectIncomingRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IndirectIncoming extends TableImpl<IndirectIncomingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DB.indirect_incoming</code>
     */
    public static final IndirectIncoming INDIRECT_INCOMING = new IndirectIncoming();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IndirectIncomingRecord> getRecordType() {
        return IndirectIncomingRecord.class;
    }

    /**
     * The column <code>DB.indirect_incoming.db_id</code>.
     */
    public final TableField<IndirectIncomingRecord, Long> DB_ID = createField(DSL.name("db_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>DB.indirect_incoming.account_id</code>.
     */
    public final TableField<IndirectIncomingRecord, Long> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.indirect_incoming.transaction_id</code>.
     */
    public final TableField<IndirectIncomingRecord, Long> TRANSACTION_ID = createField(DSL.name("transaction_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.indirect_incoming.height</code>.
     */
    public final TableField<IndirectIncomingRecord, Integer> HEIGHT = createField(DSL.name("height"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.indirect_incoming.amount</code>.
     */
    public final TableField<IndirectIncomingRecord, Long> AMOUNT = createField(DSL.name("amount"), SQLDataType.BIGINT.defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>DB.indirect_incoming.quantity</code>.
     */
    public final TableField<IndirectIncomingRecord, Long> QUANTITY = createField(DSL.name("quantity"), SQLDataType.BIGINT.defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    private IndirectIncoming(Name alias, Table<IndirectIncomingRecord> aliased) {
        this(alias, aliased, null);
    }

    private IndirectIncoming(Name alias, Table<IndirectIncomingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB.indirect_incoming</code> table reference
     */
    public IndirectIncoming(String alias) {
        this(DSL.name(alias), INDIRECT_INCOMING);
    }

    /**
     * Create an aliased <code>DB.indirect_incoming</code> table reference
     */
    public IndirectIncoming(Name alias) {
        this(alias, INDIRECT_INCOMING);
    }

    /**
     * Create a <code>DB.indirect_incoming</code> table reference
     */
    public IndirectIncoming() {
        this(DSL.name("indirect_incoming"), null);
    }

    public <O extends Record> IndirectIncoming(Table<O> child, ForeignKey<O, IndirectIncomingRecord> key) {
        super(child, key, INDIRECT_INCOMING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.INDIRECT_INCOMING_INDIRECT_INCOMING_HEIGHT_IDX, Indexes.INDIRECT_INCOMING_INDIRECT_INCOMING_ID_INDEX, Indexes.INDIRECT_INCOMING_INDIRECT_INCOMING_INDEX);
    }

    @Override
    public Identity<IndirectIncomingRecord, Long> getIdentity() {
        return (Identity<IndirectIncomingRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<IndirectIncomingRecord> getPrimaryKey() {
        return Keys.KEY_INDIRECT_INCOMING_PRIMARY;
    }

    @Override
    public List<UniqueKey<IndirectIncomingRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_INDIRECT_INCOMING_INDIRECT_INCOMING_DB_ID_UINDEX);
    }

    @Override
    public IndirectIncoming as(String alias) {
        return new IndirectIncoming(DSL.name(alias), this);
    }

    @Override
    public IndirectIncoming as(Name alias) {
        return new IndirectIncoming(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IndirectIncoming rename(String name) {
        return new IndirectIncoming(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IndirectIncoming rename(Name name) {
        return new IndirectIncoming(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, Integer, Long, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
