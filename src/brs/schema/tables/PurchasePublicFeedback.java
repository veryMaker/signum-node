/*
 * This file is generated by jOOQ.
 */
package brs.schema.tables;


import brs.schema.Db;
import brs.schema.Indexes;
import brs.schema.Keys;
import brs.schema.tables.records.PurchasePublicFeedbackRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PurchasePublicFeedback extends TableImpl<PurchasePublicFeedbackRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DB.purchase_public_feedback</code>
     */
    public static final PurchasePublicFeedback PURCHASE_PUBLIC_FEEDBACK = new PurchasePublicFeedback();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PurchasePublicFeedbackRecord> getRecordType() {
        return PurchasePublicFeedbackRecord.class;
    }

    /**
     * The column <code>DB.purchase_public_feedback.db_id</code>.
     */
    public final TableField<PurchasePublicFeedbackRecord, Long> DB_ID = createField(DSL.name("db_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>DB.purchase_public_feedback.id</code>.
     */
    public final TableField<PurchasePublicFeedbackRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.purchase_public_feedback.public_feedback</code>.
     */
    public final TableField<PurchasePublicFeedbackRecord, String> PUBLIC_FEEDBACK = createField(DSL.name("public_feedback"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>DB.purchase_public_feedback.height</code>.
     */
    public final TableField<PurchasePublicFeedbackRecord, Integer> HEIGHT = createField(DSL.name("height"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.purchase_public_feedback.latest</code>.
     */
    public final TableField<PurchasePublicFeedbackRecord, Boolean> LATEST = createField(DSL.name("latest"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("1", SQLDataType.BOOLEAN)), this, "");

    private PurchasePublicFeedback(Name alias, Table<PurchasePublicFeedbackRecord> aliased) {
        this(alias, aliased, null);
    }

    private PurchasePublicFeedback(Name alias, Table<PurchasePublicFeedbackRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB.purchase_public_feedback</code> table
     * reference
     */
    public PurchasePublicFeedback(String alias) {
        this(DSL.name(alias), PURCHASE_PUBLIC_FEEDBACK);
    }

    /**
     * Create an aliased <code>DB.purchase_public_feedback</code> table
     * reference
     */
    public PurchasePublicFeedback(Name alias) {
        this(alias, PURCHASE_PUBLIC_FEEDBACK);
    }

    /**
     * Create a <code>DB.purchase_public_feedback</code> table reference
     */
    public PurchasePublicFeedback() {
        this(DSL.name("purchase_public_feedback"), null);
    }

    public <O extends Record> PurchasePublicFeedback(Table<O> child, ForeignKey<O, PurchasePublicFeedbackRecord> key) {
        super(child, key, PURCHASE_PUBLIC_FEEDBACK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PURCHASE_PUBLIC_FEEDBACK_PURCHASE_PUBLIC_FEEDBACK_ID_HEIGHT_IDX);
    }

    @Override
    public Identity<PurchasePublicFeedbackRecord, Long> getIdentity() {
        return (Identity<PurchasePublicFeedbackRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PurchasePublicFeedbackRecord> getPrimaryKey() {
        return Keys.KEY_PURCHASE_PUBLIC_FEEDBACK_PRIMARY;
    }

    @Override
    public PurchasePublicFeedback as(String alias) {
        return new PurchasePublicFeedback(DSL.name(alias), this);
    }

    @Override
    public PurchasePublicFeedback as(Name alias) {
        return new PurchasePublicFeedback(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PurchasePublicFeedback rename(String name) {
        return new PurchasePublicFeedback(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PurchasePublicFeedback rename(Name name) {
        return new PurchasePublicFeedback(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, String, Integer, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
