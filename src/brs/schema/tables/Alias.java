/*
 * This file is generated by jOOQ.
 */
package brs.schema.tables;


import brs.schema.Db;
import brs.schema.Indexes;
import brs.schema.Keys;
import brs.schema.tables.records.AliasRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Alias extends TableImpl<AliasRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DB.alias</code>
     */
    public static final Alias ALIAS = new Alias();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AliasRecord> getRecordType() {
        return AliasRecord.class;
    }

    /**
     * The column <code>DB.alias.db_id</code>.
     */
    public final TableField<AliasRecord, Long> DB_ID = createField(DSL.name("db_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>DB.alias.id</code>.
     */
    public final TableField<AliasRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.alias.account_id</code>.
     */
    public final TableField<AliasRecord, Long> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.alias.alias_name</code>.
     */
    public final TableField<AliasRecord, String> ALIAS_NAME = createField(DSL.name("alias_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>DB.alias.alias_name_lower</code>.
     */
    public final TableField<AliasRecord, String> ALIAS_NAME_LOWER = createField(DSL.name("alias_name_lower"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>DB.alias.alias_uri</code>.
     */
    public final TableField<AliasRecord, String> ALIAS_URI = createField(DSL.name("alias_uri"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>DB.alias.timestamp</code>.
     */
    public final TableField<AliasRecord, Integer> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.alias.height</code>.
     */
    public final TableField<AliasRecord, Integer> HEIGHT = createField(DSL.name("height"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.alias.latest</code>.
     */
    public final TableField<AliasRecord, Boolean> LATEST = createField(DSL.name("latest"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("1", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>DB.alias.tld</code>.
     */
    public final TableField<AliasRecord, Long> TLD = createField(DSL.name("tld"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    private Alias(Name alias, Table<AliasRecord> aliased) {
        this(alias, aliased, null);
    }

    private Alias(Name alias, Table<AliasRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB.alias</code> table reference
     */
    public Alias(String alias) {
        this(DSL.name(alias), ALIAS);
    }

    /**
     * Create an aliased <code>DB.alias</code> table reference
     */
    public Alias(Name alias) {
        this(alias, ALIAS);
    }

    /**
     * Create a <code>DB.alias</code> table reference
     */
    public Alias() {
        this(DSL.name("alias"), null);
    }

    public <O extends Record> Alias(Table<O> child, ForeignKey<O, AliasRecord> key) {
        super(child, key, ALIAS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ALIAS_ALIAS_ACCOUNT_ID_IDX, Indexes.ALIAS_ALIAS_HEIGHT_IDX, Indexes.ALIAS_ALIAS_NAME_LOWER_IDX);
    }

    @Override
    public Identity<AliasRecord, Long> getIdentity() {
        return (Identity<AliasRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AliasRecord> getPrimaryKey() {
        return Keys.KEY_ALIAS_PRIMARY;
    }

    @Override
    public List<UniqueKey<AliasRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ALIAS_ALIAS_ID_HEIGHT_IDX);
    }

    @Override
    public Alias as(String alias) {
        return new Alias(DSL.name(alias), this);
    }

    @Override
    public Alias as(Name alias) {
        return new Alias(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Alias rename(String name) {
        return new Alias(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Alias rename(Name name) {
        return new Alias(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, Long, String, String, String, Integer, Integer, Boolean, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
