/*
 * This file is generated by jOOQ.
 */
package brs.schema;


import brs.schema.tables.Account;
import brs.schema.tables.AccountAsset;
import brs.schema.tables.AccountBalance;
import brs.schema.tables.Alias;
import brs.schema.tables.AliasOffer;
import brs.schema.tables.AskOrder;
import brs.schema.tables.Asset;
import brs.schema.tables.AssetTransfer;
import brs.schema.tables.At;
import brs.schema.tables.AtMap;
import brs.schema.tables.AtState;
import brs.schema.tables.BidOrder;
import brs.schema.tables.Block;
import brs.schema.tables.Escrow;
import brs.schema.tables.EscrowDecision;
import brs.schema.tables.FlywaySchemaHistory;
import brs.schema.tables.Goods;
import brs.schema.tables.IndirectIncoming;
import brs.schema.tables.Peer;
import brs.schema.tables.Purchase;
import brs.schema.tables.PurchaseFeedback;
import brs.schema.tables.PurchasePublicFeedback;
import brs.schema.tables.RewardRecipAssign;
import brs.schema.tables.Subscription;
import brs.schema.tables.Trade;
import brs.schema.tables.Transaction;
import brs.schema.tables.UnconfirmedTransaction;
import brs.schema.tables.records.AccountAssetRecord;
import brs.schema.tables.records.AccountBalanceRecord;
import brs.schema.tables.records.AccountRecord;
import brs.schema.tables.records.AliasOfferRecord;
import brs.schema.tables.records.AliasRecord;
import brs.schema.tables.records.AskOrderRecord;
import brs.schema.tables.records.AssetRecord;
import brs.schema.tables.records.AssetTransferRecord;
import brs.schema.tables.records.AtMapRecord;
import brs.schema.tables.records.AtRecord;
import brs.schema.tables.records.AtStateRecord;
import brs.schema.tables.records.BidOrderRecord;
import brs.schema.tables.records.BlockRecord;
import brs.schema.tables.records.EscrowDecisionRecord;
import brs.schema.tables.records.EscrowRecord;
import brs.schema.tables.records.FlywaySchemaHistoryRecord;
import brs.schema.tables.records.GoodsRecord;
import brs.schema.tables.records.IndirectIncomingRecord;
import brs.schema.tables.records.PeerRecord;
import brs.schema.tables.records.PurchaseFeedbackRecord;
import brs.schema.tables.records.PurchasePublicFeedbackRecord;
import brs.schema.tables.records.PurchaseRecord;
import brs.schema.tables.records.RewardRecipAssignRecord;
import brs.schema.tables.records.SubscriptionRecord;
import brs.schema.tables.records.TradeRecord;
import brs.schema.tables.records.TransactionRecord;
import brs.schema.tables.records.UnconfirmedTransactionRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in DB.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> KEY_ACCOUNT_ACCOUNT_ID_HEIGHT_IDX = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("KEY_account_account_id_height_idx"), new TableField[] { Account.ACCOUNT.ID, Account.ACCOUNT.HEIGHT }, true);
    public static final UniqueKey<AccountRecord> KEY_ACCOUNT_PRIMARY = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("KEY_account_PRIMARY"), new TableField[] { Account.ACCOUNT.DB_ID }, true);
    public static final UniqueKey<AccountAssetRecord> KEY_ACCOUNT_ASSET_ACCOUNT_ASSET_ID_HEIGHT_IDX = Internal.createUniqueKey(AccountAsset.ACCOUNT_ASSET, DSL.name("KEY_account_asset_account_asset_id_height_idx"), new TableField[] { AccountAsset.ACCOUNT_ASSET.ACCOUNT_ID, AccountAsset.ACCOUNT_ASSET.ASSET_ID, AccountAsset.ACCOUNT_ASSET.HEIGHT }, true);
    public static final UniqueKey<AccountAssetRecord> KEY_ACCOUNT_ASSET_PRIMARY = Internal.createUniqueKey(AccountAsset.ACCOUNT_ASSET, DSL.name("KEY_account_asset_PRIMARY"), new TableField[] { AccountAsset.ACCOUNT_ASSET.DB_ID }, true);
    public static final UniqueKey<AccountBalanceRecord> KEY_ACCOUNT_BALANCE_ACCOUNT_BALANCE_ID_HEIGHT_IDX = Internal.createUniqueKey(AccountBalance.ACCOUNT_BALANCE, DSL.name("KEY_account_balance_account_balance_id_height_idx"), new TableField[] { AccountBalance.ACCOUNT_BALANCE.ID, AccountBalance.ACCOUNT_BALANCE.HEIGHT }, true);
    public static final UniqueKey<AccountBalanceRecord> KEY_ACCOUNT_BALANCE_PRIMARY = Internal.createUniqueKey(AccountBalance.ACCOUNT_BALANCE, DSL.name("KEY_account_balance_PRIMARY"), new TableField[] { AccountBalance.ACCOUNT_BALANCE.DB_ID }, true);
    public static final UniqueKey<AliasRecord> KEY_ALIAS_ALIAS_ID_HEIGHT_IDX = Internal.createUniqueKey(Alias.ALIAS, DSL.name("KEY_alias_alias_id_height_idx"), new TableField[] { Alias.ALIAS.ID, Alias.ALIAS.HEIGHT }, true);
    public static final UniqueKey<AliasRecord> KEY_ALIAS_PRIMARY = Internal.createUniqueKey(Alias.ALIAS, DSL.name("KEY_alias_PRIMARY"), new TableField[] { Alias.ALIAS.DB_ID }, true);
    public static final UniqueKey<AliasOfferRecord> KEY_ALIAS_OFFER_ALIAS_OFFER_ID_HEIGHT_IDX = Internal.createUniqueKey(AliasOffer.ALIAS_OFFER, DSL.name("KEY_alias_offer_alias_offer_id_height_idx"), new TableField[] { AliasOffer.ALIAS_OFFER.ID, AliasOffer.ALIAS_OFFER.HEIGHT }, true);
    public static final UniqueKey<AliasOfferRecord> KEY_ALIAS_OFFER_PRIMARY = Internal.createUniqueKey(AliasOffer.ALIAS_OFFER, DSL.name("KEY_alias_offer_PRIMARY"), new TableField[] { AliasOffer.ALIAS_OFFER.DB_ID }, true);
    public static final UniqueKey<AskOrderRecord> KEY_ASK_ORDER_ASK_ORDER_ID_HEIGHT_IDX = Internal.createUniqueKey(AskOrder.ASK_ORDER, DSL.name("KEY_ask_order_ask_order_id_height_idx"), new TableField[] { AskOrder.ASK_ORDER.ID, AskOrder.ASK_ORDER.HEIGHT }, true);
    public static final UniqueKey<AskOrderRecord> KEY_ASK_ORDER_PRIMARY = Internal.createUniqueKey(AskOrder.ASK_ORDER, DSL.name("KEY_ask_order_PRIMARY"), new TableField[] { AskOrder.ASK_ORDER.DB_ID }, true);
    public static final UniqueKey<AssetRecord> KEY_ASSET_ASSET_ID_IDX = Internal.createUniqueKey(Asset.ASSET, DSL.name("KEY_asset_asset_id_idx"), new TableField[] { Asset.ASSET.ID }, true);
    public static final UniqueKey<AssetRecord> KEY_ASSET_PRIMARY = Internal.createUniqueKey(Asset.ASSET, DSL.name("KEY_asset_PRIMARY"), new TableField[] { Asset.ASSET.DB_ID }, true);
    public static final UniqueKey<AssetTransferRecord> KEY_ASSET_TRANSFER_PRIMARY = Internal.createUniqueKey(AssetTransfer.ASSET_TRANSFER, DSL.name("KEY_asset_transfer_PRIMARY"), new TableField[] { AssetTransfer.ASSET_TRANSFER.DB_ID }, true);
    public static final UniqueKey<AtRecord> KEY_AT_AT_ID_HEIGHT_IDX = Internal.createUniqueKey(At.AT, DSL.name("KEY_at_at_id_height_idx"), new TableField[] { At.AT.ID, At.AT.HEIGHT }, true);
    public static final UniqueKey<AtRecord> KEY_AT_PRIMARY = Internal.createUniqueKey(At.AT, DSL.name("KEY_at_PRIMARY"), new TableField[] { At.AT.DB_ID }, true);
    public static final UniqueKey<AtMapRecord> KEY_AT_MAP_PRIMARY = Internal.createUniqueKey(AtMap.AT_MAP, DSL.name("KEY_at_map_PRIMARY"), new TableField[] { AtMap.AT_MAP.DB_ID }, true);
    public static final UniqueKey<AtStateRecord> KEY_AT_STATE_AT_STATE_AT_ID_HEIGHT_IDX = Internal.createUniqueKey(AtState.AT_STATE, DSL.name("KEY_at_state_at_state_at_id_height_idx"), new TableField[] { AtState.AT_STATE.AT_ID, AtState.AT_STATE.HEIGHT }, true);
    public static final UniqueKey<AtStateRecord> KEY_AT_STATE_PRIMARY = Internal.createUniqueKey(AtState.AT_STATE, DSL.name("KEY_at_state_PRIMARY"), new TableField[] { AtState.AT_STATE.DB_ID }, true);
    public static final UniqueKey<BidOrderRecord> KEY_BID_ORDER_BID_ORDER_ID_HEIGHT_IDX = Internal.createUniqueKey(BidOrder.BID_ORDER, DSL.name("KEY_bid_order_bid_order_id_height_idx"), new TableField[] { BidOrder.BID_ORDER.ID, BidOrder.BID_ORDER.HEIGHT }, true);
    public static final UniqueKey<BidOrderRecord> KEY_BID_ORDER_PRIMARY = Internal.createUniqueKey(BidOrder.BID_ORDER, DSL.name("KEY_bid_order_PRIMARY"), new TableField[] { BidOrder.BID_ORDER.DB_ID }, true);
    public static final UniqueKey<BlockRecord> KEY_BLOCK_BLOCK_HEIGHT_IDX = Internal.createUniqueKey(Block.BLOCK, DSL.name("KEY_block_block_height_idx"), new TableField[] { Block.BLOCK.HEIGHT }, true);
    public static final UniqueKey<BlockRecord> KEY_BLOCK_BLOCK_ID_IDX = Internal.createUniqueKey(Block.BLOCK, DSL.name("KEY_block_block_id_idx"), new TableField[] { Block.BLOCK.ID }, true);
    public static final UniqueKey<BlockRecord> KEY_BLOCK_BLOCK_TIMESTAMP_IDX = Internal.createUniqueKey(Block.BLOCK, DSL.name("KEY_block_block_timestamp_idx"), new TableField[] { Block.BLOCK.TIMESTAMP }, true);
    public static final UniqueKey<BlockRecord> KEY_BLOCK_PRIMARY = Internal.createUniqueKey(Block.BLOCK, DSL.name("KEY_block_PRIMARY"), new TableField[] { Block.BLOCK.DB_ID }, true);
    public static final UniqueKey<EscrowRecord> KEY_ESCROW_ESCROW_ID_HEIGHT_IDX = Internal.createUniqueKey(Escrow.ESCROW, DSL.name("KEY_escrow_escrow_id_height_idx"), new TableField[] { Escrow.ESCROW.ID, Escrow.ESCROW.HEIGHT }, true);
    public static final UniqueKey<EscrowRecord> KEY_ESCROW_PRIMARY = Internal.createUniqueKey(Escrow.ESCROW, DSL.name("KEY_escrow_PRIMARY"), new TableField[] { Escrow.ESCROW.DB_ID }, true);
    public static final UniqueKey<EscrowDecisionRecord> KEY_ESCROW_DECISION_ESCROW_DECISION_ESCROW_ID_ACCOUNT_ID_HEIGHT_IDX = Internal.createUniqueKey(EscrowDecision.ESCROW_DECISION, DSL.name("KEY_escrow_decision_escrow_decision_escrow_id_account_id_height_idx"), new TableField[] { EscrowDecision.ESCROW_DECISION.ESCROW_ID, EscrowDecision.ESCROW_DECISION.ACCOUNT_ID, EscrowDecision.ESCROW_DECISION.HEIGHT }, true);
    public static final UniqueKey<EscrowDecisionRecord> KEY_ESCROW_DECISION_PRIMARY = Internal.createUniqueKey(EscrowDecision.ESCROW_DECISION, DSL.name("KEY_escrow_decision_PRIMARY"), new TableField[] { EscrowDecision.ESCROW_DECISION.DB_ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> KEY_FLYWAY_SCHEMA_HISTORY_PRIMARY = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("KEY_flyway_schema_history_PRIMARY"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<GoodsRecord> KEY_GOODS_GOODS_ID_HEIGHT_IDX = Internal.createUniqueKey(Goods.GOODS, DSL.name("KEY_goods_goods_id_height_idx"), new TableField[] { Goods.GOODS.ID, Goods.GOODS.HEIGHT }, true);
    public static final UniqueKey<GoodsRecord> KEY_GOODS_PRIMARY = Internal.createUniqueKey(Goods.GOODS, DSL.name("KEY_goods_PRIMARY"), new TableField[] { Goods.GOODS.DB_ID }, true);
    public static final UniqueKey<IndirectIncomingRecord> KEY_INDIRECT_INCOMING_INDIRECT_INCOMING_DB_ID_UINDEX = Internal.createUniqueKey(IndirectIncoming.INDIRECT_INCOMING, DSL.name("KEY_indirect_incoming_indirect_incoming_db_id_uindex"), new TableField[] { IndirectIncoming.INDIRECT_INCOMING.ACCOUNT_ID, IndirectIncoming.INDIRECT_INCOMING.TRANSACTION_ID }, true);
    public static final UniqueKey<IndirectIncomingRecord> KEY_INDIRECT_INCOMING_PRIMARY = Internal.createUniqueKey(IndirectIncoming.INDIRECT_INCOMING, DSL.name("KEY_indirect_incoming_PRIMARY"), new TableField[] { IndirectIncoming.INDIRECT_INCOMING.DB_ID }, true);
    public static final UniqueKey<PeerRecord> KEY_PEER_PRIMARY = Internal.createUniqueKey(Peer.PEER, DSL.name("KEY_peer_PRIMARY"), new TableField[] { Peer.PEER.ADDRESS }, true);
    public static final UniqueKey<PurchaseRecord> KEY_PURCHASE_PRIMARY = Internal.createUniqueKey(Purchase.PURCHASE, DSL.name("KEY_purchase_PRIMARY"), new TableField[] { Purchase.PURCHASE.DB_ID }, true);
    public static final UniqueKey<PurchaseRecord> KEY_PURCHASE_PURCHASE_ID_HEIGHT_IDX = Internal.createUniqueKey(Purchase.PURCHASE, DSL.name("KEY_purchase_purchase_id_height_idx"), new TableField[] { Purchase.PURCHASE.ID, Purchase.PURCHASE.HEIGHT }, true);
    public static final UniqueKey<PurchaseFeedbackRecord> KEY_PURCHASE_FEEDBACK_PRIMARY = Internal.createUniqueKey(PurchaseFeedback.PURCHASE_FEEDBACK, DSL.name("KEY_purchase_feedback_PRIMARY"), new TableField[] { PurchaseFeedback.PURCHASE_FEEDBACK.DB_ID }, true);
    public static final UniqueKey<PurchasePublicFeedbackRecord> KEY_PURCHASE_PUBLIC_FEEDBACK_PRIMARY = Internal.createUniqueKey(PurchasePublicFeedback.PURCHASE_PUBLIC_FEEDBACK, DSL.name("KEY_purchase_public_feedback_PRIMARY"), new TableField[] { PurchasePublicFeedback.PURCHASE_PUBLIC_FEEDBACK.DB_ID }, true);
    public static final UniqueKey<RewardRecipAssignRecord> KEY_REWARD_RECIP_ASSIGN_PRIMARY = Internal.createUniqueKey(RewardRecipAssign.REWARD_RECIP_ASSIGN, DSL.name("KEY_reward_recip_assign_PRIMARY"), new TableField[] { RewardRecipAssign.REWARD_RECIP_ASSIGN.DB_ID }, true);
    public static final UniqueKey<RewardRecipAssignRecord> KEY_REWARD_RECIP_ASSIGN_REWARD_RECIP_ASSIGN_ACCOUNT_ID_HEIGHT_IDX = Internal.createUniqueKey(RewardRecipAssign.REWARD_RECIP_ASSIGN, DSL.name("KEY_reward_recip_assign_reward_recip_assign_account_id_height_idx"), new TableField[] { RewardRecipAssign.REWARD_RECIP_ASSIGN.ACCOUNT_ID, RewardRecipAssign.REWARD_RECIP_ASSIGN.HEIGHT }, true);
    public static final UniqueKey<SubscriptionRecord> KEY_SUBSCRIPTION_PRIMARY = Internal.createUniqueKey(Subscription.SUBSCRIPTION, DSL.name("KEY_subscription_PRIMARY"), new TableField[] { Subscription.SUBSCRIPTION.DB_ID }, true);
    public static final UniqueKey<SubscriptionRecord> KEY_SUBSCRIPTION_SUBSCRIPTION_ID_HEIGHT_IDX = Internal.createUniqueKey(Subscription.SUBSCRIPTION, DSL.name("KEY_subscription_subscription_id_height_idx"), new TableField[] { Subscription.SUBSCRIPTION.ID, Subscription.SUBSCRIPTION.HEIGHT }, true);
    public static final UniqueKey<TradeRecord> KEY_TRADE_PRIMARY = Internal.createUniqueKey(Trade.TRADE, DSL.name("KEY_trade_PRIMARY"), new TableField[] { Trade.TRADE.DB_ID }, true);
    public static final UniqueKey<TradeRecord> KEY_TRADE_TRADE_ASK_BID_IDX = Internal.createUniqueKey(Trade.TRADE, DSL.name("KEY_trade_trade_ask_bid_idx"), new TableField[] { Trade.TRADE.ASK_ORDER_ID, Trade.TRADE.BID_ORDER_ID }, true);
    public static final UniqueKey<TransactionRecord> KEY_TRANSACTION_PRIMARY = Internal.createUniqueKey(Transaction.TRANSACTION, DSL.name("KEY_transaction_PRIMARY"), new TableField[] { Transaction.TRANSACTION.DB_ID }, true);
    public static final UniqueKey<TransactionRecord> KEY_TRANSACTION_TRANSACTION_FULL_HASH_IDX = Internal.createUniqueKey(Transaction.TRANSACTION, DSL.name("KEY_transaction_transaction_full_hash_idx"), new TableField[] { Transaction.TRANSACTION.FULL_HASH }, true);
    public static final UniqueKey<TransactionRecord> KEY_TRANSACTION_TRANSACTION_ID_IDX = Internal.createUniqueKey(Transaction.TRANSACTION, DSL.name("KEY_transaction_transaction_id_idx"), new TableField[] { Transaction.TRANSACTION.ID }, true);
    public static final UniqueKey<UnconfirmedTransactionRecord> KEY_UNCONFIRMED_TRANSACTION_PRIMARY = Internal.createUniqueKey(UnconfirmedTransaction.UNCONFIRMED_TRANSACTION, DSL.name("KEY_unconfirmed_transaction_PRIMARY"), new TableField[] { UnconfirmedTransaction.UNCONFIRMED_TRANSACTION.DB_ID }, true);
    public static final UniqueKey<UnconfirmedTransactionRecord> KEY_UNCONFIRMED_TRANSACTION_UNCONFIRMED_TRANSACTION_ID_IDX = Internal.createUniqueKey(UnconfirmedTransaction.UNCONFIRMED_TRANSACTION, DSL.name("KEY_unconfirmed_transaction_unconfirmed_transaction_id_idx"), new TableField[] { UnconfirmedTransaction.UNCONFIRMED_TRANSACTION.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BlockRecord, BlockRecord> CONSTRAINT_3C = Internal.createForeignKey(Block.BLOCK, DSL.name("constraint_3c"), new TableField[] { Block.BLOCK.PREVIOUS_BLOCK_ID }, Keys.KEY_BLOCK_BLOCK_ID_IDX, new TableField[] { Block.BLOCK.ID }, true);
    public static final ForeignKey<BlockRecord, BlockRecord> CONSTRAINT_3C5 = Internal.createForeignKey(Block.BLOCK, DSL.name("constraint_3c5"), new TableField[] { Block.BLOCK.NEXT_BLOCK_ID }, Keys.KEY_BLOCK_BLOCK_ID_IDX, new TableField[] { Block.BLOCK.ID }, true);
    public static final ForeignKey<TransactionRecord, BlockRecord> CONSTRAINT_FF = Internal.createForeignKey(Transaction.TRANSACTION, DSL.name("constraint_ff"), new TableField[] { Transaction.TRANSACTION.BLOCK_ID }, Keys.KEY_BLOCK_BLOCK_ID_IDX, new TableField[] { Block.BLOCK.ID }, true);
}
